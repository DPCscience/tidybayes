% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/unspread_ungather_samples.R
\name{unspread_samples}
\alias{unspread_samples}
\alias{ungather_samples}
\title{Turn tidy data frames of parameters from a Bayesian model back into untidy data}
\usage{
unspread_samples(data, ..., indices = c(".chain", ".iteration"),
  drop_indices = FALSE)

ungather_samples(data, ..., term = "term", estimate = "estimate",
  indices = c(".chain", ".iteration"), drop_indices = FALSE)
}
\arguments{
\item{data}{A tidy data frame of samples, such as one output by \code{spread_samples} or \code{gather_samples}.}

\item{...}{Expressions in the form of
\code{variable_name[index_1, index_2, ...]}. See \code{\link{spread_samples}}.}

\item{indices}{Character vector of column names in \code{data} that
should be treated as indices of chain/iteration. The default is \code{c(".chain",".iteration")},
which are the same names used for chain/iteration indices returned by
\code{\link{spread_samples}} or \code{\link{gather_samples}}.}

\item{drop_indices}{Drop the columns specified by \code{indices} from the resulting data frame. Default \code{FALSE}.}

\item{term}{The name of the column in \code{data} that contains the names of parameters from the model.}

\item{estimate}{The name of the column in \code{data} that contains the samples of the parameters.}
}
\value{
A data frame.
}
\description{
Inverse operations of \code{\link{spread_samples}} and \code{\link{gather_samples}}, giving
results that look like \code{\link{as_sample_tibble}}.
}
\details{
These functions take symbolic specifications of parameter names and indices in the same format as
\code{\link{spread_samples}} and \code{\link{gather_samples}} and invert the tidy data frame back into
a data frame whose column names are parameters with indices in them.
}
\examples{

library(magrittr)

data(RankCorr, package = "tidybayes")

# We can use unspread_samples to allow us to manipulate samples with tidybayes
# and then transform the samples into a form we can use with packages like bayesplot.
# Here we subset b[i,j] to just values of i in 1:3 and j == 1, then plot with bayesplot
RankCorr \%>\%
  spread_samples(b[i,j]) \%>\%
  filter(i \%in\% 1:3, j == 1) \%>\%
  unspread_samples(b[i,j], drop_indices = TRUE) \%>\%
  bayesplot::mcmc_areas()

# As another example, we could use compare_levels to plot all pairwise comparisons
# of b[i,1] for i in 1:3
RankCorr \%>\%
  spread_samples(b[i,j]) \%>\%
  filter(i \%in\% 1:3, j == 1) \%>\%
  compare_levels(b, by = i) \%>\%
  unspread_samples(b[i], drop_indices = TRUE) \%>\%
  bayesplot::mcmc_areas()

}
\seealso{
\code{\link{spread_samples}}, \code{\link{gather_samples}}, \code{\link{as_sample_tibble}}.
}
\author{
Matthew Kay
}
\keyword{manip}
